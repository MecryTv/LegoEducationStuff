from hub import light_matrix, port, sound

import motor
import runloop
import distance_sensor
import motor_pair
import random
import math
import asyncio

async def main():

    await light_matrix.write("Code")
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.E)

    driveSpeed = 800
    lastCurve = 0
    driveDistance = 10000
    wheelDiameter = 5
    degree = 0
    totalDistance = 0

    wheelCircum = math.pi * wheelDiameter

    def driveDistanace():
        distance = distance_sensor.distance(port.B)
        return distance == -1 or distance > 100

    async def ride(direction):
        nonlocal totalDistance

        if isinstance(direction, str):
            
            if direction == 'forward':
                print('Driving Forward')
                degree = int((driveDistance / wheelCircum) + 360)
                totalDistance += (degree / 360) * wheelCircum
                motor_pair.move(motor_pair.PAIR_1, 0, velocity=driveSpeed)

            elif direction == 'backward':
                print('Driving Backwards')
                degree = -int((driveDistance / wheelCircum) + 360)
                totalDistance += abs(degree / 360) * wheelCircum
                await motor_pair.move_for_degrees(motor_pair.PAIR_1, degree, 0, velocity=driveSpeed)

    async def randomDirection(direction, backWardDir):
        nonlocal degree
        nonlocal driveSpeed
        nonlocal lastCurve

        driveSpeed = 300

        if isinstance(direction, str):

            if direction == 'backward':

                if backWardDir == 1:
                    driveSpeed == 800
                    await ride('backward')

                elif backWardDir == 2:
                    print('Driving Back Right')

                    lastCurve = 30
                    await motor.run_for_degrees(port.C, 30, 100)
                    await ride('backward')

                elif backWardDir == 3:
                    print('Driving Back Left')

                    lastCurve = -32
                    await motor.run_for_degrees(port.C, -32, 100)
                    await ride('backward')

                else:
                    await sound.beep(500, 10, 100)
                    await light_matrix.write("Error")

            elif direction == 'left':
                lastCurve = -32
                await motor.run_for_degrees(port.C, -32, 100)
                await ride('forward')

            elif direction == 'right':
                lastCurve = 30
                await motor.run_for_degrees(port.C, 30, 100)
                await ride('forward')

            else:
                await sound.beep(500, 10, 100)
                await light_matrix.write("Error")   
                
    while True:
        if distance_sensor.distance(port.B)>100 or distance_sensor.distance(port.B)==-1:
            await ride('forward')
            
            directions = ['backward', 'left', 'right']
            randomWay = random.choice(directions)
            randomInt = random.randint(1, 3)
            await randomDirection(randomWay, randomInt)

            if lastCurve == 30:
                await motor.run_for_degrees(port.C, -30, 100)

            elif lastCurve == -32:
                await motor.run_for_degrees(port.C, 32, 100)

            driveSpeed = 800
            await ride('forward')
            print(math.ceil(totalDistance))

        else:
            motor_pair.stop(motor_pair.PAIR_1)
            await light_matrix.write("Stopped")
            break
        

if __name__ == "__main__":
    runloop.run(main())
